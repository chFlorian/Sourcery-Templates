{"version":3,"instance":"eyJpZCI6IkVBQ0JGNDU5LTIxMzUtNDYwMC1BRDAwLThDNUFDQTgzMzJDNyIsImRlc2NyaXB0aW9uIjoiIiwiY29udGVudCI6ImltcG9ydCBDb21iaW5lXG5pbXBvcnQgRmlyZWJhc2VGaXJlc3RvcmVcbmltcG9ydCBGaXJlYmFzZUZpcmVzdG9yZVN3aWZ0XG5cbmVudW0gRmlyZWJhc2VFcnJvcjogRXJyb3Ige1xuICAgIGNhc2UgYmFkU25hcHNob3RcbiAgICBjYXNlIGNhbnREZWNvZGVcbn1cblxuZW51bSBGaXJlYmFzZVNlcnZpY2Uge1xuICAgIHN0YXRpYyBsZXQgc3RvcmUgPSBGaXJlc3RvcmUuZmlyZXN0b3JlKClcblxuICAgIHslIGZvciB0eXBlIGluIHR5cGVzLmFsbCAlfVxuICAgIHN0YXRpYyBmdW5jIGdldHt7IHR5cGUubmFtZSB9fXMoKSAtPiBBbnlQdWJsaXNoZXI8W3t7IHR5cGUubmFtZSB9fV0sIEVycm9yPiB7XG4gICAgICAgIEZ1dHVyZTxbe3sgdHlwZS5uYW1lIH19XSwgRXJyb3I+IHsgcHJvbWlzZSBpblxuICAgICAgICAgICAgc3RvcmVcbiAgICAgICAgICAgICAgICAuY29sbGVjdGlvbihcInt7IHR5cGUubmFtZSB9fXNcIilcbiAgICAgICAgICAgICAgICAuZ2V0RG9jdW1lbnRzIHsgc25hcHNob3QsIGVycm9yIGluXG4gICAgICAgICAgICAgICAgICAgIGlmIGxldCBlcnJvciA9IGVycm9yIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2UoLmZhaWx1cmUoZXJyb3IpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGd1YXJkIGxldCBzbmFwc2hvdCA9IHNuYXBzaG90IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZSguZmFpbHVyZShGaXJlYmFzZUVycm9yLmJhZFNuYXBzaG90KSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0czogW3t7IHR5cGUubmFtZSB9fV0gPSBbXVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgZm9yIGRvY3VtZW50IGluIHNuYXBzaG90LmRvY3VtZW50cyB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiB2YXIgcmVzdWx0ID0gdHJ5PyBkb2N1bWVudC5kYXRhKGFzOnt7IHR5cGUubmFtZSB9fS5zZWxmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5hcHBlbmQocmVzdWx0KVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlKC5mYWlsdXJlKEZpcmViYXNlRXJyb3IuY2FudERlY29kZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHByb21pc2UoLnN1Y2Nlc3MocmVzdWx0cykpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHslIGVuZGZvciAlfVxufSIsInZlcnNpb24iOjMsImZhdm9yaXRlIjp0cnVlLCJhdXRob3IiOiJGbG9yaWFuIFNjaHdlaXplciIsImdlbmVyYXRlZENvZGUiOiJpbXBvcnQgQ29tYmluZVxuaW1wb3J0IEZpcmViYXNlRmlyZXN0b3JlXG5pbXBvcnQgRmlyZWJhc2VGaXJlc3RvcmVTd2lmdFxuXG5lbnVtIEZpcmViYXNlRXJyb3I6IEVycm9yIHtcbiAgICBjYXNlIGJhZFNuYXBzaG90XG4gICAgY2FzZSBjYW50RGVjb2RlXG59XG5cbmVudW0gRmlyZWJhc2VTZXJ2aWNlIHtcbiAgICBzdGF0aWMgbGV0IHN0b3JlID0gRmlyZXN0b3JlLmZpcmVzdG9yZSgpXG5cbiAgICBzdGF0aWMgZnVuYyBnZXRBbmltYWxzKCkgLT4gQW55UHVibGlzaGVyPFtBbmltYWxdLCBFcnJvcj4ge1xuICAgICAgICBGdXR1cmU8W0FuaW1hbF0sIEVycm9yPiB7IHByb21pc2UgaW5cbiAgICAgICAgICAgIHN0b3JlXG4gICAgICAgICAgICAgICAgLmNvbGxlY3Rpb24oXCJBbmltYWxzXCIpXG4gICAgICAgICAgICAgICAgLmdldERvY3VtZW50cyB7IHNuYXBzaG90LCBlcnJvciBpblxuICAgICAgICAgICAgICAgICAgICBpZiBsZXQgZXJyb3IgPSBlcnJvciB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlKC5mYWlsdXJlKGVycm9yKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGd1YXJkIGxldCBzbmFwc2hvdCA9IHNuYXBzaG90IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZSguZmFpbHVyZShGaXJlYmFzZUVycm9yLmJhZFNuYXBzaG90KSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHRzOiBbQW5pbWFsXSA9IFtdXG4gICAgICAgICAgICAgICAgICAgIGZvciBkb2N1bWVudCBpbiBzbmFwc2hvdC5kb2N1bWVudHMge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgdmFyIHJlc3VsdCA9IHRyeT8gZG9jdW1lbnQuZGF0YShhczpBbmltYWwuc2VsZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMuYXBwZW5kKHJlc3VsdClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZSguZmFpbHVyZShGaXJlYmFzZUVycm9yLmNhbnREZWNvZGUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHByb21pc2UoLnN1Y2Nlc3MocmVzdWx0cykpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBmdW5jIGdldFBlcnNvbnMoKSAtPiBBbnlQdWJsaXNoZXI8W1BlcnNvbl0sIEVycm9yPiB7XG4gICAgICAgIEZ1dHVyZTxbUGVyc29uXSwgRXJyb3I+IHsgcHJvbWlzZSBpblxuICAgICAgICAgICAgc3RvcmVcbiAgICAgICAgICAgICAgICAuY29sbGVjdGlvbihcIlBlcnNvbnNcIilcbiAgICAgICAgICAgICAgICAuZ2V0RG9jdW1lbnRzIHsgc25hcHNob3QsIGVycm9yIGluXG4gICAgICAgICAgICAgICAgICAgIGlmIGxldCBlcnJvciA9IGVycm9yIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2UoLmZhaWx1cmUoZXJyb3IpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZ3VhcmQgbGV0IHNuYXBzaG90ID0gc25hcHNob3QgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlKC5mYWlsdXJlKEZpcmViYXNlRXJyb3IuYmFkU25hcHNob3QpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdHM6IFtQZXJzb25dID0gW11cbiAgICAgICAgICAgICAgICAgICAgZm9yIGRvY3VtZW50IGluIHNuYXBzaG90LmRvY3VtZW50cyB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiB2YXIgcmVzdWx0ID0gdHJ5PyBkb2N1bWVudC5kYXRhKGFzOlBlcnNvbi5zZWxmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5hcHBlbmQocmVzdWx0KVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlKC5mYWlsdXJlKEZpcmViYXNlRXJyb3IuY2FudERlY29kZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZSguc3VjY2VzcyhyZXN1bHRzKSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59IiwidXJsIjoiIiwicmVnZW5lcmF0aW9uQ291bnRlciI6MCwic2FtcGxlQ29kZSI6InN0cnVjdCBQZXJzb24ge1xuICAgIGxldCBpZDogU3RyaW5nXG4gICAgbGV0IG5hbWU6IFN0cmluZ1xuICAgIGxldCBhZ2U6IEludFxufVxuXG5zdHJ1Y3QgQW5pbWFsIHtcbiAgICBsZXQgdGl0bGU6IFN0cmluZ1xufSIsInJ1bkNvbmZpZ3VyYXRpb24iOiJzZWxlY3Rpb24iLCJpc0xvY2tlZCI6ZmFsc2UsImtpbmQiOiJzdGVuY2lsIiwidHJpbVdoaXRlc3BhY2VzIjp0cnVlLCJuYW1lIjoiRmlyZWJhc2UgV3JhcHBlciIsImluc2VydGlvbk1vZGUiOiJlbmRPZkZpbGUifQ=="}